const express = require("express");
const router = express.Router();
const axios = require("axios");
const crypto = require("crypto");

const Product = require("../models/Product");
const User = require("../models/UserSchema");
const Cart = require("../models/CartSchema");
const Admin = require("../models/AdminSchema");
const CustomTshirt = require("../models/CustomTshirtSchema");
const Poster = require("../models/posterSchema");
const Order = require("../models/OrderSchema");
const Contact = require("../models/Contact");
const Notification = require("../models/Notification");
const Subscription = require("../models/subscription");
const Testimonial = require("../models/Testimonial");
const DeliveryCost = require("../models/Deliveryschema");
const Coupon = require("../models/CouponSchema");

// ------------------------------ CREATE PAYMENT ------------------------------
router.post("/phonepe/create", async (req, res) => {
  try {
    const { orderId, amount, customerName, customerEmail, customerPhone } = req.body;

    console.log("Incoming payment request body:", req.body);

    if (!orderId || !amount || !customerName || !customerEmail || !customerPhone) {
      return res.status(400).json({ success: false, message: "Missing required fields" });
    }

    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ success: false, message: "Order not found" });

    const merchantId = process.env.PHONEPE_CLIENT_ID;
    const saltKey = process.env.PHONEPE_SECRET_ID;
    const baseUrl = process.env.BASE_URL || "http://localhost:3000";
    const phonePeUrl = process.env.PHONEPE_URL || 'https://api-preprod.phonepe.com/apis/pg-sandbox/pg/v1/pay';

    const merchantTransactionId = `TXN_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
    const payload = {
      merchantId,
      merchantTransactionId,
      merchantUserId: req.user?._id?.toString() || "guest",
      amount: Math.round(amount * 100),
      redirectUrl: `${baseUrl}/payment/verify?order_id=${orderId}`,
      redirectMode: "POST",
      callbackUrl: `${baseUrl}/payment/webhook`,
      mobileNumber: customerPhone,
      paymentInstrument: { type: "PAY_PAGE" }
    };

    const base64Payload = Buffer.from(JSON.stringify(payload)).toString("base64");
    const saltIndex = 1;
    const stringToHash = base64Payload + "/pg/v1/pay" + saltKey;
    const sha256Hash = crypto.createHash("sha256").update(stringToHash).digest("hex");
    const checksum = sha256Hash + "###" + saltIndex;

    const response = await axios.post(phonePeUrl, { request: base64Payload }, {
      headers: {
        "Content-Type": "application/json",
        "X-VERIFY": checksum,
        accept: "application/json",
      }
    });

    const redirectUrl = response?.data?.data?.instrumentResponse?.redirectInfo?.url;
    if (!redirectUrl) return res.status(500).json({ success: false, message: "No redirect URL from PhonePe" });

    
// Log success before redirecting user
console.log("✅ PhonePe Payment Created Successfully");
console.log("Redirect URL:", redirectUrl);

    order.transactionId = merchantTransactionId;
    await order.save();

    return res.json({
      success: true,
      payment_url: redirectUrl,
      transactionId: merchantTransactionId
    });

  } catch (error) {
    console.error("PhonePe Create Error:", error.message);
    return res.status(500).json({ success: false, message: "Payment initiation failed" });
  }
});

// ------------------------------ VERIFY PAYMENT ------------------------------
router.post("/payment/verify", async (req, res) => {
  try {
    const { transactionId } = req.body; // you may receive it via query or body
    const orderId = req.query.order_id;

    // ✅ Call PhonePe to verify payment status
    const phonePeRes = await axios.get(`https://api-preprod.phonepe.com/apis/pg-sandbox/pg/v1/status/${process.env.PHONEPE_CLIENT_ID}/${transactionId}`, {
      headers: {
        "X-VERIFY": your_verification_checksum, // use same hashing method
        "X-MERCHANT-ID": process.env.PHONEPE_CLIENT_ID
      }
    });

    const paymentStatus = phonePeRes?.data?.data?.paymentStatus;

    if (paymentStatus !== "SUCCESS") {
      return res.status(400).send("Payment Failed");
    }

    // ✅ Create Order now
    const existingOrder = await Order.findById(orderId);
    if (!existingOrder) {
      return res.status(404).send("Order not found");
    }

    existingOrder.status = "paid"; // or whatever field you're using
    await existingOrder.save();

    // ✅ Redirect to success page
    return res.redirect(`/payment/success?order_id=${orderId}`);
  } catch (err) {
    console.error("Verification failed:", err.message);
    return res.status(500).send("Error verifying payment");
  }
});


// ------------------------------ WEBHOOK ------------------------------
router.post("/payment/webhook", async (req, res) => {
  try {
    const { transactionId, paymentState } = req.body;

    const order = await Order.findOne({ transactionId });
    if (!order) return res.status(404).json({ success: false, message: "Order not found" });

    if (paymentState === "COMPLETED") {
      order.paymentStatus = "Paid";
      order.status = "Processing";
      await order.save();
    }

    return res.status(200).json({ success: true });
  } catch (error) {
    console.error("PhonePe Webhook Error:", error.message);
    return res.status(500).json({ success: false, message: "Webhook failed" });
  }
});

module.exports = router;
